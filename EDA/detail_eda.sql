/*=============================================================================================================================================
This section contains codes to perform EDA (Exploratory Data Analysis) from different angles of the data.

**ðŸŸ Dimension Exploration: Explore different dimenions, especially low-cardinality dimension columns
**ðŸŸ Date Exploration: This includes checking date ranges etc.
**ðŸŸ Measure Exploration: Splotlighting on big numbers, i.e. highest level of aggregations, like total sales, total revenue, avg product cost, etc.
**ðŸŸ Magnitude Analysis: Breakdown of Measures by different Dimensions, i.e. total customers by countries, total customers by gender
**ðŸŸ Ranking Analyis: Rank different dimensions based on aggregated value of measures, i.e. Top 5 products which generates the highest revenue
==============================================================================================================================================*/

-- ================== Dimension Exploration =====================

-- Explore countries our countries come from
SELECT
	DISTINCT country
FROM gold.dim_customers;

-- Explore all major categories of products
SELECT 
	DISTINCT category, subcategory, product_name
FROM gold.dim_products
ORDER BY 1,2,3;

-- Explore Date Columns
SELECT
	MIN(order_date), MAX(order_date), DATEDIFF(MONTH, MIN(order_date), MAX(order_date))
FROM gold.fact_sales;

SELECT
	DATEDIFF(YEAR, MIN(birth_date), GETDATE()) AS eldest_age,
	DATEDIFF(YEAR, MAX(birth_date), GETDATE()) AS youngest_age
FROM gold.dim_customers;

-- Explore Measures
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'fact_sales';


-- ================== Measures Exploration =====================

-- Find the Total Sales
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales;

-- Find how many items are sold
SELECT COUNT(quantity) AS items_sold FROM gold.fact_sales;

-- Find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales;

-- Find the total number of orders
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales;

-- Find the total number of products
SELECT COUNT(DISTINCT product_key) AS total_products FROM gold.dim_products;

-- Find the total number of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers;

-- Find the total number of customers that placed an order
SELECT COUNT(DISTINCT customer_key) AS no_of_customers_placed_order FROM gold.fact_sales;

-- Generate a report showing all key business metrices
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
	UNION ALL
SELECT 'Items Sold' AS measure_name, COUNT(quantity) AS measure_value FROM gold.fact_sales
	UNION ALL
SELECT 'Average Price' AS measure_name, AVG(price) AS measure_value FROM gold.fact_sales
	UNION ALL
SELECT 'Total Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
	UNION ALL
SELECT 'Total Products' AS measure_name, COUNT(DISTINCT product_key) AS measure_value FROM gold.dim_products
	UNION ALL
SELECT 'Total Customers' AS measure_name, COUNT(customer_key) AS measure_value FROM gold.dim_customers
	UNION ALL
SELECT 'No. of Customers placing Order' AS measure_name, COUNT(DISTINCT customer_key) AS measure_value FROM gold.fact_sales

-- ======================== Magnitude Analysis =========================

  -- Find total customers by countries
SELECT country, COUNT(customer_id) 
FROM gold.dim_customers
GROUP BY country;

-- Find total customers by gender
SELECT gender, COUNT(customer_id)
FROM gold.dim_customers
GROUP BY gender;

-- Find total products by categories
SELECT category, COUNT(product_key)
FROM gold.dim_products
GROUP BY category;

-- Average cost in each category
SELECT category, AVG(cost) AS Avg_Cost
FROM gold.dim_products
GROUP BY category
ORDER BY Avg_Cost DESC;

-- Total revenue generated in each category
SELECT p.category, SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.category
ORDER BY Total_Revenue DESC;

-- Total revenue generated by each customer
SELECT c.customer_number, CONCAT(c.first_name, ' ', c.last_name) AS Full_Name, SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_number, CONCAT(c.first_name, ' ', c.last_name)
ORDER BY Total_Revenue DESC;

-- Distribution of sold items across countries
SELECT c.country, SUM(f.quantity) AS Total_Sold_Items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.country
ORDER BY Total_Sold_Items DESC;

-- ==================== Ranking Analysis =======================

-- Top 5 products which generates the highest revenue
SELECT
	TOP 5
	p.product_name, SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY Total_Revenue DESC;

-- 5 Worst-performing products in terms of revenue
SELECT
	TOP 5
	p.product_name, SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY Total_Revenue ASC;

-- Find top 10 customers who generated highest revenue
SELECT TOP 10
	c.customer_number, 
	CONCAT(c.first_name, ' ', c.last_name) AS Full_Name, SUM(f.sales_amount) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_number, CONCAT(c.first_name, ' ', c.last_name)
ORDER BY Total_Revenue DESC;

-- 3 customers with fewest orders placed
SELECT TOP 3
	c.customer_key, 
	CONCAT(c.first_name, ' ', c.last_name) AS Full_Name, 
	COUNT(DISTINCT f.order_number) AS Total_Orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key, CONCAT(c.first_name, ' ', c.last_name)
ORDER BY Total_Orders;
